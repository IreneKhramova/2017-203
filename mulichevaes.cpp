#include "mulichevaes.h"

/**
 * Метод Гаусса
 */
void mulichevaes::lab1()
{
    double t;
    //Прямой ход
    for (int k = 0; k < N; k++)
    {
        t = A[k][k];

        //Делим все элементы k'ой строки на a[k][k] элемент, потому что он диагональный и мы хотим на нём получить значение 1 для удобства дальнейших вычислений
        for (int j = 0; j < N; j++)
            A[k][j] = A[k][j] / t;
            b[k] =b[k]/t;

        for (int i = k + 1; i < N; i++)
        {
            t = A[i][k];
            //Вычитаем из всех строк лежащих ниже k'ой к'ую строку помноженную на k'ый элемент строки,
			// из которой вычитаем, что даёт нам ноль в этом элементе после вычитания и матрица постепенно приобретает треугольный вид
        
            for (int j = 0; j < N; j++)
            {
                A[i][j] =A[i][j]- A[k][j] * t;
            }
            b[i] =b[i]- b[k] * t;
        }
    }

    //Матрица треугольного вида готова, теперь можем последовательно, снизу вверх вычислять искомые значения элементов матрицы x
    //Осуществляем обратный ход
    for (int k = N - 1; k > 0; k--)
    {
        for (int i = k - 1; i >= 0; i--)
        {
            t = A[i][k];
            
            for (int j = 0; j < N; j++)
                A[i][j] =A[i][j]- A[k][j] * t;
            b[i] =b[i] - b[k] * t;
        }
    }

    for(int i=0; i<N; i++)
        x[i]=b[i];
    
}


/**
 * Метод Гаусса с выбором главного элемента
 */
void mulichevaes::lab2()
{
	//Это некоторая оптимизация метода Гаусса. 
	//Суть состоит в том, что бы при каждом шаге, элемент главной диагонали, под которым мы будем получать нули в нижележащих строках, 
	//должен быть максимальным из других таких же элементов нижележащих строк. Потому как это поможет при делении уменьшить ошибку округления,
	// ну и вообще там может оказаться деление на ноль
    double t;
    
    for (int k = 0; k < N; k++)
    {
        //Ищем самый большой элемент стоящий на к'атом месте по всем строкам, по умолчанию он k'ый
        int maxel=k;
        for(int i=k+1;i<N;i++)
            if(abs(A[i][k]) > abs(A[maxel][k]))
                maxel=i;
        //Нашли, теперь надо поменять k'ую строчку и строчку с максимальным элементом местами
        for(int i=0;i<N;i++)
            std::swap(A[k][i],A[maxel][i]);
        std::swap(b[k],b[maxel]);


        //А дальше всё делаем по методу Гаусса по коду из лабораторной номер 1

    //Прямой ход
   
        t = A[k][k];

        //Делим все элементы k'ой строки на a[k][k] элемент, потому что он диагональный и мы хотим на нём получить значение 1 для удобства дальнейших вычислений
        for (int j = 0; j < N; j++)
            A[k][j] = A[k][j] / t;
            b[k] =b[k]/t;

        for (int i = k + 1; i < N; i++)
        {
            t = A[i][k];
            //Вычитаем из всех строк лежащих ниже k'ой к'ую строку помноженную на k'ый элемент строки,
			// из которой вычитаем, что даёт нам ноль в этом элементе после вычитания и матрица постепенно приобретает треугольный вид
        
            for (int j = 0; j < N; j++)
            {
                A[i][j] =A[i][j]- A[k][j] * t;
            }
            b[i] =b[i]- b[k] * t;
        }
    }

    //Матрица треугольного вида готова, теперь можем последовательно, снизу вверх вычислять искомые значения элементов матрицы x
    //Осуществляем обратный ход
    for (int k = N - 1; k > 0; k--)
    {
        for (int i = k - 1; i >= 0; i--)
        {
            t = A[i][k];
            
            for (int j = 0; j < N; j++)
                A[i][j] =A[i][j]- A[k][j] * t;
            b[i] =b[i] - b[k] * t;
        }
    }

    for(int i=0; i<N; i++)
        x[i]=b[i];
}



/**
 * ????? ??????????? ????? (????? ?????????)
 */
void mulichevaes::lab3()
{

}



/**
 * ????? ????????
 */
void mulichevaes::lab4()
{

}



/**
 * ????? ?????
 */
void mulichevaes::lab5()
{

}



/**
 * ????? ???????
 */
void mulichevaes::lab6()
{

}



/**
 * ???? ?? ??????????? ???????
 */
void mulichevaes::lab7()
{

}
void mulichevaes::lab8()
{

}

std::string mulichevaes::get_name()
{        
  return std::string("Муличева Екатерина");
}
